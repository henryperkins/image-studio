# Nginx Frontend Dockerfile
FROM node:20-alpine AS builder

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

# Copy package files
COPY package.json pnpm-workspace.yaml pnpm-lock.yaml ./
COPY web/package.json ./web/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy web source
COPY web ./web

# Build web app with production API URL
ENV VITE_API_BASE_URL=/api
RUN cd web && pnpm build

# Nginx stage
FROM nginx:alpine

# Install useful packages for debugging
RUN apk add --no-cache curl

# Remove default nginx config
RUN rm -f /etc/nginx/conf.d/default.conf

# Copy nginx configuration
COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf

# Copy built web app
COPY --from=builder /app/web/dist /usr/share/nginx/html

# Create a health check endpoint
RUN echo "OK" > /usr/share/nginx/html/health

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Create nginx cache directories with proper permissions for nginx worker processes
RUN mkdir -p /var/cache/nginx/client_temp \
             /var/cache/nginx/proxy_temp \
             /var/cache/nginx/fastcgi_temp \
             /var/cache/nginx/uwsgi_temp \
             /var/cache/nginx/scgi_temp && \
    chown -R nginx:nginx /var/cache/nginx && \
    chmod -R 755 /var/cache/nginx

# Note: nginx master process runs as root (standard practice for nginx containers)
# Worker processes run as 'nginx' user as configured in nginx.conf
EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]